import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
import matplotlib.pyplot as plt
import seaborn as sns
 UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5
  warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"
df = pd.read_csv('/kaggle/input/top-200-spotify-songs-dataset/Spotify_Dataset_V3.csv', delimiter=';')
df.head()
  df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 651936 entries, 0 to 651935
Data columns (total 20 columns):
 #   Column                            Non-Null Count   Dtype  
---  ------                            --------------   -----  
 0   Rank                              651936 non-null  int64  
 1   Title                             651936 non-null  object 
 2   Artists                           651936 non-null  object 
 3   Date                              651936 non-null  object 
 4   Danceability                      651936 non-null  float64
 5   Energy                            651936 non-null  float64
 6   Loudness                          651936 non-null  float64
 7   Speechiness                       651936 non-null  float64
  8   Acousticness                      651936 non-null  float64
 9   Instrumentalness                  651936 non-null  float64
 10  Valence                           651936 non-null  float64
 11  # of Artist                       651936 non-null  object 
 12  Artist (Ind.)                     651936 non-null  object 
 13  # of Nationality                  651936 non-null  object 
 14  Nationality                       651936 non-null  object 
 15  Continent                         651936 non-null  object 
 16  Points (Total)                    651936 non-null  int64  
 17  Points (Ind for each Artist/Nat)  651936 non-null  float64
 18  id                                651936 non-null  object 
 19  Song URL                          651936 non-null  object 
dtypes: float64(8), int64(2), object(10)
memory usage: 99.5+ MB
df.columns
Index(['Rank', 'Title', 'Artists', 'Date', 'Danceability', 'Energy',
       'Loudness', 'Speechiness', 'Acousticness', 'Instrumentalness',
       'Valence', '# of Artist', 'Artist (Ind.)', '# of Nationality',
       'Nationality', 'Continent', 'Points (Total)',
       'Points (Ind for each Artist/Nat)', 'id', 'Song URL'],
      dtype='object')
  a = df.shape
print(f"Spotify's Dataset Has {a} Columns & Rows")
Spotify's Dataset Has (651936, 20) Columns & Rows
df.describe()
  df.describe(include='object')
  #Checking Null Values
df.isna().sum()
Rank                                0
Title                               0
Artists                             0
Date                                0
Danceability                        0
Energy                              0
Loudness                            0
Speechiness                         0
Acousticness                        0
Instrumentalness                    0
Valence                             0
# of Artist                         0
Artist (Ind.)                       0
# of Nationality                    0
Nationality                         0
Continent                           0
Points (Total)                      0
Points (Ind for each Artist/Nat)    0
id                                  0
Song URL                            0
dtype: int64
(df['Loudness']<-60).value_counts()
True     587116
False     64820
Name: Loudness, dtype: int64
loudness_range = (-60, 0)
df = df[(df['Loudness'] >=loudness_range[0]) & (df['Loudness'] <= loudness_range[1])]
print(f"Before Data Cleaning (651936, 20)")
print(f"After Data Cleaning {df.shape}")
Before Data Cleaning (651936, 20)
After Data Cleaning (64707, 20)
  plt.figure(figsize=(8,6))
correlation = df.corr()
sns.heatmap(correlation , annot=True , fmt='.2f')
plt.show
 FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  correlation = df.corr()
  <function matplotlib.pyplot.show(close=None, block=None)>
features = ['Danceability','Loudness','Speechiness','Acousticness','Energy','Valence','Instrumentalness']
df[features].hist(figsize=(10,8))
plt.title("Distribution Of Features" , fontsize=10)
plt.show()
  nationality_counts = df['Nationality'].value_counts()
nationality_counts.plot(kind='bar', figsize=(12, 8))
plt.title("Number of Songs by Nationality")
plt.xlabel("Nationality")
plt.ylabel("Count")
plt.show()
selected_features = ['Energy', 'Loudness', 'Danceability', 'Instrumentalness', 'Rank']
sns.set(style="whitegrid")
sns.pairplot(df[selected_features], diag_kind='kde')
plt.suptitle("Scatter Plots of Audio Features vs Rank", y=1.02)
plt.show()
UserWarning: The figure layout has changed to tight
  self._figure.tight_layout(*args, **kwargs)
  artist_points = df.groupby('Artists')['Points (Total)'].sum().sort_values(ascending=False)
top_n = 10
top_artists = artist_points.head(top_n)
popular_songs = df[df['Artists'].isin(top_artists.index)][['Artists', 'Title']]
plt.figure(figsize=(8, 6))
plt.barh(top_artists.index, top_artists.values, color='skyblue')
plt.xlabel('Total Points')
plt.ylabel('Artists')
plt.title('Top Artists and Their Popular Songs')
plt.gca().invert_yaxis() 
plt.show()
energy_danceability = df[['Energy', 'Danceability']]
plt.figure(figsize=(8, 8))
plt.scatter(energy_danceability['Energy'], energy_danceability['Danceability'], color='tab:orange', alpha=0.5)
plt.xlabel('Energy')
plt.ylabel('Danceability')
plt.title('Energy vs. Danceability of Songs')
plt.grid(True)
plt.show()
df = df.drop_duplicates(subset=['Title', 'Points (Total)'], keep='first')
top_songs = df[['Title', 'Points (Total)']].sort_values('Points (Total)', ascending=False).head(20)
sns.barplot(data =top_songs, x='Points (Total)', y='Title')
plt.title('Top Songs by Points')
plt.xlabel('Points (Total)')
plt.ylabel('Title')
plt.show()
